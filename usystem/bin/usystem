#!/usr/bin/env bash

# bash strict mode
set -T # inherit DEBUG and RETURN trap for functions
set -C # prevent file overwrite by > &> <>
set -E # inherit -e
set -e # exit immediately on errors
set -u # exit on not assigned variables
set -o pipefail # exit on pipe failure


################################################################################
# global variable
################################################################################
declare -r CLI_VERSION='1.0.0';
declare -r CLI_NAME='usystem';
declare -r PS4='debug($LINENO) ${FUNCNAME[0]:+${FUNCNAME[0]}}(): ';
declare -r USYSTEM_ROOT_DIR=/volume1/@usystem;
declare -r USYSTEM_WORK_DIR=${USYSTEM_ROOT_DIR}/usystem;

CLI_EXEC_DATE="$(date +'%Y%m%d-%H%M%S')";
readonly CLI_EXEC_DATE

# TODO: Upgrade to global option
declare -r BRANCH='main'


################################################################################
# functions
################################################################################
function _download() {
    local LOG_LOCATION="${1}"

    umask 022
    if wget -L https://github.com/TimmerTech/synology-usystem/archive/main.tar.gz -O ${USYSTEM_ROOT_DIR}/usystem.tar.gz -o "${LOG_LOCATION}" > /dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}


################################################################################
# commands
################################################################################
function create_directories() {
    # Create directories
    declare -ra DIRECTORIES=(
        etc/certs
        log
        reports
        sbin
    )

    for DIR in "${DIRECTORIES[@]}"; do
        if [ ! -d "${USYSTEM_WORK_DIR}/${DIR}" ]; then
            mkdir -p "${USYSTEM_WORK_DIR}/${DIR}" || return 1
        fi
    done

    return 0
}

function repair_help() {
    echo $CLI_NAME repair
    echo
    echo Description:
    printf "%-4s%s\n" "" "Repair usystem, used after DSM upgrade or update."
    printf "%-4s%s\n" "" "This will mount and relink usystem to your Synology"
    exit 0
}

function repair_permissions() {
    if ! chmod -R 775 "${USYSTEM_WORK_DIR}"/bin; then
        return 1
    fi
    if ! chmod -R 775 "${USYSTEM_WORK_DIR}"/etc; then
        return 1
    fi
    if ! chmod -R 700 "${USYSTEM_WORK_DIR}"/sbin; then
        return 1
    fi
    if ! chmod -R 775 "${USYSTEM_WORK_DIR}/log"; then
        return 1
    fi

    if ! chown -R root:administrators "${USYSTEM_WORK_DIR}"/bin; then
        return 1
    fi
    if ! chown -R root:administrators "${USYSTEM_WORK_DIR}"/etc; then
        return 1
    fi
    if ! chown -R root:administrators "${USYSTEM_WORK_DIR}"/log; then
        return 1
    fi

    return 0
}

function repair() {
    MSG="Repairing"
    while [ ${#} -gt 0 ]; do
        case $1 in
            -h | --help | help )
                repair_help
            ;;
            --install )
                MSG="Installing"
            ;;
        esac
    done

    if [[ $(/usr/bin/id -u) -ne 0 ]]; then
        echo "'usystem repair' must be run as root"
        exit 1
    fi

    printf "%-32s " "${MSG} rc.usystem ..."
    if cp "${USYSTEM_WORK_DIR}/etc/rc.usystem" /etc; then
        printf '[OK]\n'
    else
        printf '[FAILED]\n'
        exit 1
    fi

    printf "%-32s " "${MSG} rc.local ..."
    if cp "${USYSTEM_WORK_DIR}/etc/rc.local" /etc; then
        printf '[OK]\n'
    else
        printf '[FAILED]\n'
        exit 1
    fi

    printf "%-32s " "${MSG} permissions ..."
    if repair_permissions; then
        printf '[OK]\n'
    else
        printf '[FAILED]\n'
        exit 1
    fi

    # Make sure to start usystem
    "${USYSTEM_WORK_DIR}/etc/rc.usystem" start

    # Repair completed, now link/re-link all usystem resources back to the OS
    # This will a user to only issue the repair command after a DSM upgrade to
    # completely restore everything
    #
    # Link usystem resources to OS
    $(basename "${0}") link

    exit 0;
}

function link_help() {
    echo $CLI_NAME link
    echo
    echo Description:
    printf "%-4s%s\n" "" "Link usystem"
    printf "%-4s%s\n" "" "This will link resources from usystem to the OS."
    exit 0
}

function link() {
    while [ ${#} -gt 0 ]; do
        case $1 in
            -h | --help | help )
                link_help
            ;;
        esac
    done

    if [[ $(/usr/bin/id -u) -ne 0 ]]; then
        echo "'usystem link' must be run as root"
        exit 1
    fi
}

function install_help() {
    echo $CLI_NAME install
    echo
    echo Description:
    printf "%-4s%s\n" "" "Install usystem"
    printf "%-4s%s\n" "" "This will install, mount and link usystem to your Synology"
    exit 0
}

function install() {
    while [ ${#} -gt 0 ]; do
        case $1 in
            -h | --help | help )
                install_help
            ;;
        esac
    done

    if [[ $(/usr/bin/id -u) -ne 0 ]]; then
        echo "'usystem install' must be run as root"
        exit 1
    fi

    # Create usystem root directory
    if [ ! -d "${USYSTEM_ROOT_DIR}" ]; then
        mkdir -p "${USYSTEM_ROOT_DIR}"
    fi

    if [ -d "${USYSTEM_WORK_DIR}" ]; then
        echo "${USYSTEM_WORK_DIR} already exists; please use 'usystem upgrade'"
        exit 1
    fi

    printf "%-32s " "Downloading usystem ..."
    DOWNLOAD_LOG="${USYSTEM_ROOT_DIR}/usystem.download.${CLI_EXEC_DATE}.log"
    if _download "${DOWNLOAD_LOG}"; then
        printf '[OK]\n'

        # Everything went OK; delete download log
        rm "${DOWNLOAD_LOG}"
    else
        printf '[FAILED]\n'
        echo "ERROR: Failed to download; see log: ${DOWNLOAD_LOG}"
        exit 1
    fi

    printf "%-32s " "Installing ..."
    EXTRACT_LOG="${USYSTEM_ROOT_DIR}/usystem.install.${CLI_EXEC_DATE}.log"
    if tar -xvf "${USYSTEM_ROOT_DIR}/usystem.tar.gz" --strip-components=1 -C "${USYSTEM_ROOT_DIR}" > "${EXTRACT_LOG}" 2>&1; then
        printf '[OK]\n'

        # Everything went ok; delete install log, and downloaded archive
        rm "${EXTRACT_LOG}"
        rm "${USYSTEM_ROOT_DIR}/usystem.tar.gz"
    else
        printf '[FAILED]\n'
        echo "ERROR: Failed to extract; see log: ${EXTRACT_LOG}"
        exit 1
    fi

    # Create all directories
    printf "%-32s " "Creating Directories ..."
    if create_directories; then
        printf '[OK]\n'
    else
        printf '[FAILED]\n'
        echo "ERROR: Failed to create directories"
        exit 1
    fi

    # Directories are created now run repair with hidden parameter to
    # set the console message to 'Installing'
    $(basename "${0}") repair --install
}

function backup_help() {
    echo $CLI_NAME backup
    echo
    echo Description:
    printf "%-4s%s\n" "" "Create backup of usystem."
    exit 0
}

function backup() {
    while [ ${#} -gt 0 ]; do
        case $1 in
            -h | --help | help )
                backup_help
            ;;
        esac
    done

    umask 022
    rm -f "${USYSTEM_ROOT_DIR}"/usystem.tar.gz

    if [ ! -d "${USYSTEM_ROOT_DIR}/backup" ]; then
        mkdir -p "${USYSTEM_ROOT_DIR}/backup"
    fi

    printf "%-32s " "Creating backup ..."
    if tar -czf "${USYSTEM_ROOT_DIR}/backup/usystem.backup.${CLI_EXEC_DATE}.tar.gz" --exclude usystem/tmp -C "${USYSTEM_ROOT_DIR}" usystem/; then
        printf '[OK]\n'
    else
        printf '[FAILED]\n'
        echo "ERROR: Failed to create backup"
        exit 1
    fi
}

function upgrade_help() {
    echo $CLI_NAME upgrade
    echo
    echo Description:
    printf "%-4s%s\n" "" "Upgrade to latest version of usystem."
    exit 0
}

function upgrade() {
    while [ ${#} -gt 0 ]; do
        case $1 in
            -h | --help | help )
                upgrade_help
            ;;
        esac
    done

    # Set umask
    umask 022

    if [[ $(/usr/bin/id -u) -ne 0 ]]; then
        echo "usystem upgrade must be run as root"
        exit 1
    fi

    # Create backup
    $(basename "${0}") backup

    rm -f "${USYSTEM_ROOT_DIR}/usystem.tar.gz"

    printf "%-32s " "Downloading upgrade ..."
    DOWNLOAD_LOG="${USYSTEM_WORK_DIR}/log/usystem.download.${CLI_EXEC_DATE}.log"
    if _download "${DOWNLOAD_LOG}"; then
        printf '[OK]\n'
    else
        printf '[FAILED]\n'
        echo "ERROR: Failed to download; see log: ${DOWNLOAD_LOG}"
        exit 1
    fi

    printf "%-32s " "Upgrading ..."
    EXTRACT_LOG="${USYSTEM_WORK_DIR}/log/usystem.upgrade.${CLI_EXEC_DATE}.log"
    if tar -xvf "${USYSTEM_ROOT_DIR}/usystem.tar.gz" --strip-components=1 -C "${USYSTEM_ROOT_DIR}" > "${EXTRACT_LOG}" 2>&1; then
        printf '[OK]\n'
    else
        printf '[FAILED]\n'
        echo "ERROR: Failed to extract; see log: ${EXTRACT_LOG}"

        # TODO: REVERT BACKUP

        # Terminate Upgrade
        exit 1
    fi

    # Create all directories
    printf "%-32s " "Creating Directories ..."
    if create_directories; then
        printf '[OK]\n'
    else
        printf '[FAILED]\n'
        echo "ERROR: Failed to create directories"
        exit 1
    fi

    $(basename "${0}") repair
}

function main_help() {
    echo $CLI_NAME $CLI_VERSION
    echo
    echo Usage:
    printf "%-4s%s\n" "" "$CLI_NAME command [options]"
    printf "%-4s%s\n" "" "$CLI_NAME command help"
    echo
    echo Global:
    printf "%-4s%-23s %s\n" "" "help" "show help";
    printf "%-4s%-23s %s\n" "" "version" "show version";
    echo
    echo Commands:
    printf "%-4s%-23s %s\n" "" "backup" "Backup usystem";
    printf "%-4s%-23s %s\n" "" "install" "Install usystem";
    printf "%-4s%-23s %s\n" "" "upgrade" "Upgrade usystem";
    printf "%-4s%-23s %s\n" "" "repair" "Repair usystem";
    printf "%-4s%-23s %s\n" "" "link" "Link usystem resources to OS";

    exit "${1:-0}";
}

function version() {
    echo $CLI_NAME $CLI_VERSION;
    exit 0
}

function main() {
    if (( ${#} == 0 )); then
        main_help 0;
    fi

    case ${1} in
        help )
            main_help 0;
        ;;
        version )
            version
        ;;
        backup | install | upgrade | repair | link )
            $1 "${@:2}";
        ;;
        * )
            echo "unknown command: $1";
            main_help 1;
        ;;
    esac
}

main "$@";
