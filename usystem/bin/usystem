#!/usr/bin/env bash
#shellcheck disable=SC2155
# SC2155: Declare and assign separately to avoid masking return values
#===============================================================================
# IMPLEMENTATION
#===============================================================================
#% ${CLI_NAME}: Synology User System
#%    version:        ${CLI_VERSION}
#%    author:         G.J.R. Timmer (https://www.timmertech.io)
#%    license:        MIT
#%
#% ENVIRONMENT
#%    volume:         ${USYS_VOLUME}
#%    target:         ${USYS_TARGET}
#%    root:           ${USYS_ROOT}
#%    backup:         ${USYS_BACKUP_DIR}
#%    config          ${USYS_CONFIG_DIR}
#%    log:            ${USYS_LOG_DIR}
#%    tmp:            ${USYS_TMP_DIR}
#%
#% REPOSITORY
#%    url:            ${USYS_REPO_URL}
#%
#===============================================================================
# IMPLEMENTATION_END
#===============================================================================
# USAGE
#===============================================================================
#% SYNOPSIS
#+    ${CLI_NAME} [OPTIONS] [COMMAND] [CMD_OPTIONS...]
#%
#% DESCRIPTION
#%    Synology User System Control
#%    This script allows you to control the Synology User System
#%
#% COMMANDS
#%    backup            Backup user system
#%    clean             Clean user system
#%    install           Install Synology user system
#%    link              Link user system resources to DSM
#%    repair            Repair user system, used after DSM update/upgrade
#%    upgrade           Upgrade user system to latest version
#%    help              Show usage information
#%    version           Show version and implementation information
#%
#% HELP
#%    Providing -h, --help or help as parameter to a command will show the usage
#%    information of a particular command.
#%
#% EXAMPLES
#%    usystem repair
#%    usystem link
#%    usystem install
#%
#===============================================================================
# USAGE_END
#===============================================================================
# INSTALL
#===============================================================================
#% SYNOPSIS
#+    ${CLI_NAME} install [OPTIONS...]
#%
#% DESCRIPTION
#%    This will install the Synology User System
#%
#% OPTIONS
#%    -f, --force           Forced install, will override any safety measure [FORCE]
#%    -v, --volume          Set volume to install to; (default /volume1) [USYS_VOLUME]
#%    -t, --target-dir      Set target installation directory (default USYS_VOLUME/@usystem) [USYS_TARGET]
#%    -r, --root-dir        Set root directory (default USYS_TARGET/usystem) [USYS_ROOT]
#%    -b, --backup-dir      Set backup directory (default USYS_TARGET/backup) [USYS_BACKUP_DIR]
#%    -c, --config-dir      Set config directory (default USYS_ROOT/etc) [USYS_CONFIG_DIR]
#%    -l, --log-dir         Set log direcotory (default USYS_ROOT/log) [USYS_LOG_DIR]
#%
#%
#===============================================================================
# INSTALL_END
#===============================================================================


#===============================================================================
# SHELL CONFIG
#===============================================================================
set -T # inherit DEBUG and RETURN trap for functions
set -C # prevent file overwrite by > &> <>
set -E # inherit -e
set -e # exit immediately on errors
set -u # exit on not assigned variables
set -o pipefail # exit on pipe failure

# Define script finish function
trap 'finish' EXIT


#===============================================================================
# GLOBAL VARS
#===============================================================================
declare -r CLI_NAME=$(basename "${0}");
# shellcheck disable=SC2034
declare -r CLI_VERSION=1.0.0;
# shellcheck disable=SC2034
declare -r CLI_DIR="$( cd "$(dirname "$0")" && pwd )"

# Logging
declare -A LOG_LEVELS=([NONE]=0 [DEBUG]=1 [WARN]=2 [ERROR]=3)
declare LOG_LEVEL="${LOG_LEVEL:-INFO}"

# User System VARS
declare USYS_VOLUME="${USYS_VOLUME:-/volume1}";
declare USYS_TARGET="${USYS_TARGET:-"${USYS_VOLUME}/@usystem"}";
declare USYS_ROOT="${USYS_ROOT:-"${USYS_TARGET}/usystem"}";
declare USYS_BACKUP_DIR="${USYS_BACKUP_DIR:-${USYS_TARGET}/backup}";
declare USYS_CONFIG_DIR="${USYS_CONFIG_DIR:-${USYS_ROOT}/etc}";
declare USYS_LOG_DIR="${USYS_LOG_DIR:-${USYS_ROOT}/log}";
declare -r USYS_TMP_DIR="${USYS_TMP_DIR:-${USYS_ROOT}/tmp}";

# User System Repository
declare -r USYS_REPO_URL="${USYS_REPO_URL:-https://github.com/TimmerTech/synology-usystem}";
declare -r USYS_REPO_ARCHIVE="${USYS_REPO_ARCHIVE:-${USYS_ROOT}/usystem.tgz}";

# CLI Exec Date/Time
declare -r CLI_EXEC_DT="$(date +'%Y%m%d-%H%M%S')";


#===============================================================================
# FUNCTIONS
#===============================================================================
function scriptinfo_part() {
    local -r PART="${1}"
    local -r FILTER="${2}"

    sed -n "/${PART}/,/${PART}_END/p" "${0}" | grep -e "${FILTER}" | sed -e "s/${FILTER}//g"
}

function scriptinfo_replace_var() {
    local -r VARNAME="${1}"

    sed -e "s|\${${VARNAME}}|${!VARNAME}|g"
}

# scriptinfo
#
# Parameters
#   (1) EXIT Code
#   (2) Command to display info for, defaults to 'help'
#   (3) short/full; display short or full info, defaults to 'full'
function scriptinfo() {
    # Parameters
    local -r EXIT="${1:-0}"
    local -r CMD="${2:-help}"
    local -r DISPLAY="${3:-full}"

    # Filter
    local FILTER="^#[%+]";

    # Configure Display by altering FILTER
    case "${DISPLAY,,}" in
        short ) FILTER="^#+"    ;;
        full  ) FILTER="^#[%+]" ;;
    esac

    case "${CMD,,}" in
        help | usage)
            scriptinfo_part USAGE "${FILTER}" | scriptinfo_replace_var CLI_NAME
        ;;

        version | implementation)
                scriptinfo_part IMPLEMENTATION "${FILTER}" |
                scriptinfo_replace_var CLI_NAME |
                scriptinfo_replace_var CLI_VERSION |
                scriptinfo_replace_var USYS_VOLUME |
                scriptinfo_replace_var USYS_TARGET |
                scriptinfo_replace_var USYS_ROOT |
                scriptinfo_replace_var USYS_BACKUP_DIR |
                scriptinfo_replace_var USYS_CONFIG_DIR |
                scriptinfo_replace_var USYS_LOG_DIR |
                scriptinfo_replace_var USYS_TMP_DIR |
                scriptinfo_replace_var USYS_REPO_URL
        ;;

        *)
            scriptinfo_part "${CMD^^}" "${FILTER}" | scriptinfo_replace_var CLI_NAME
        ;;
    esac

    exit "${EXIT:-0}"
}

function is_root() {
    local -r CMD="${1}"

    if [[ $(/usr/bin/id -u) -ne 0 ]]; then
        printf "'${CLI_NAME} %s' must be run as root\n" "${CMD}"
        exit 1
    fi
}

function exists() {
    local -r PATH="${1}"

    if [ -e "${PATH}" ]; then
        return 0
    else
        return 1
    fi
}

function log() {
    local -r LVL="${1}"
    local -r MSG="${2}"

    # Check if log level exists
    [[ ${LOG_LEVELS[${LVL}]} ]] || return 1

    # Check is current log level is
    if (( LVL == 0 )); then
        echo "${MSG}"
    fi

    (( ${LOG_LEVELS[${LVL}]} < ${LOG_LEVELS[${LOG_LEVEL}]} )) && return 2

    printf '%-6s %s\n' "${LVL} " "${MSG}"
}


#===============================================================================
# COMMANDS
#===============================================================================
function install() {
    # Install Variables
    local FORCE=0

    # Parse Install Options
    while [ ${#} -gt 0 ]; do
        case $1 in
            -h | --help | help)
                scriptinfo 0 install
            ;;

            -f | --force)       FORCE=1;                readonly FORCE;             shift 1 ;;
            -v | --volume)      USYS_VOLUME="${1}";     readonly USYS_VOLUME;       shift 1 ;;
            -t | --target-dir)  USYS_TARGET="${1}";     readonly USYS_TARGET;       shift 1 ;;
            -r | --root-dir)    USYS_ROOT="${1}";       readonly USYS_ROOT;         shift 1 ;;
            -b | --backup-dir)  USYS_BACKUP_DIR="${1}"; readonly USYS_BACKUP_DIR;   shift 1 ;;
            -c | --config-dir)  USYS_CONFIG_DIR="${1}"; readonly USYS_CONFIG_DIR;   shift 1 ;;
            -l | --log-dir)     USYS_LOG_DIR="${1}";    readonly USYS_LOG_DIR;      shift 1 ;;

            * )
                printf "unknown option: '%s'\n" "${1}"
                scriptinfo 1 install
            ;;
        esac
    done

    # Check if we are running as root
    is_root "${FUNCNAME[0]}"

    # Verify the volume path exists
    #exists "${USYS_VOLUME}" || ( printf "Volume: '%s' does not exists\n" "${USYS_VOLUME}" && exit 1 )
    exists "${USYS_VOLUME}" || ( log ERROR "Volume: '${USYS_VOLUME}' does not exists" && exit 1 )
}

#===============================================================================
# FINISH
#
# Script cleanup function
# ':' Returns TRUE to ensure empty function is allowed to be defined
#===============================================================================
function finish() {
    :
}


#===============================================================================
# MAIN
#===============================================================================
function main() {
    if (( ${#} == 0 )); then
        scriptinfo 0 usage
    fi

    case ${1} in
        -h | --help | help )
            scriptinfo 0 usage
        ;;

        -v | --version | version )
            scriptinfo 0 version
        ;;

        -l | --log-level )
            LOG_LEVEL="${1^^}"
            shift 1
        ;;

        install )
            $1 "${@:2}";
        ;;

        * )
            echo "unknown command: $1";
            scriptinfo 1 usage
        ;;
    esac
}

main "$@";
